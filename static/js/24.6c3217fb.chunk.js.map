{"version":3,"sources":["Store/Actions/CorporateActions/CorporateAction.js","Components/Forms/CorporateCmp/RegisterCmp/CorporatePrimaryCmp.js","Pages/Forms/Corporate/Register/Register.js"],"names":["ResetRdrAction","dispatch","type","actionTypes","payload","undefined","APIStatus","val","GetCountryCodeAction","Axios","get","then","res","resp","data","catch","err","JSON","stringify","toast","error","parse","message","SignupAction","model","history","URL","formData","FormData","key","append","post","localStorage","removeItem","setItem","success","push","response","errors","StudentSignupAction","VerifyOtpAction","MobileVerified","emailVerified","ResendOtpAction","GetCategoryListAction","SaveCoprorateData","step","CreatePaymentAction","token","getItem","header","headers","sessionStorage","orderID","ValidatePaymentAction","messages","forEach","referenceObject","CorporatePrimaryCmp","corporatePrimaryData","saveData","handlerChange","handleSubmit","countryCodes","code","code2","emailErr","email2Err","mobileErr","mobile2Err","onSubmit","className","name","onChange","value","corporateName","placeholder","autoFocus","corporateHQAddressLine1","required","corporateHQAddressLine2","corporateHQAddressCountry","disabled","length","map","item","i","corporateHQAddressState","corporateHQAddressCity","corporateHQAddressDistrict","corporateHQAddressZipCode","style","width","readOnly","corporateHQAddressPhone","corporateHQAddressEmail","CIN","id","htmlFor","corporateLocalBranchAddressLine1","corporateLocalBranchAddressLine2","corporateLocalBranchAddressCountry","corporateLocalBranchAddressState","corporateLocalBranchAddressCity","corporateLocalBranchAddressDistrict","corporateLocalBranchAddressZipCode","corporateLocalBranchAddressPhone","corporateLocalBranchAddressEmail","Register","props","useState","setCorporatePrimaryData","setErrors","setCode","setCode2","useDispatch","storeData","useSelector","state","CorporateReducer","corporatePrimaryState","console","log","useEffect","prevState","event","target","checked","preState","mailformat","test","mailformat1","countryCode1","find","callingCodes","countryCode2","preventDefault"],"mappings":"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","file":"static/js/24.6c3217fb.chunk.js","sourcesContent":["\nimport Axios from '../../../utils/axios';\nimport { toast } from 'react-toastify';\nimport * as actionTypes from './actionTypes';\n\n\n\n// RESET ALL REDUCERES\nexport const ResetRdrAction = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.RESET,\n            payload: undefined\n        })\n    }\n}\n\nexport const APISuccess = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.SUCCESS,\n            payload: true\n        })\n    }\n}\nexport const APIStatus = (val) => {\n    return (dispatch) => {\n        dispatch({ type: actionTypes.APISTATUS, payload: val });\n    }\n}\n\nexport const APIError = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.ERROR,\n            payload: true\n        })\n    }\n}\n\n\nexport const GetCountryCodeAction = () => {\n    return (dispatch) => {\n        const URL = \"http://restcountries.eu/rest/v2/all?fields=name;flag;callingCodes;\";\n        Axios.get(URL)\n            .then((res) => {\n                let resp = res.data;\n                dispatch({ type: actionTypes.COUNTRYCODES, payload: resp });\n            })\n            .catch((err) => {\n                const val = JSON.stringify(err);\n                toast.error(JSON.parse(val).message);\n            })\n    }\n}\n\n// REGISTER (CORPORATE & UNIVERSITY)\nexport const SignupAction = (model, history, type) => {\n    return (dispatch) => {\n        // const URL = \"/o/signUp/Corporate\";\n        let URL;\n        if (type === 'Corporate') {\n            URL = \"/o/signUp/Corporate\";\n        } else if (type === 'University') {\n            URL = \"/o/signUp/University\";\n        }\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        dispatch({ type: actionTypes.CORPORATE, payload: model });\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                localStorage.removeItem('imgpath');\n                localStorage.setItem('regStatus', JSON.stringify(resp));\n                localStorage.setItem('steps', 3);\n                dispatch({ type: actionTypes.STEPS, payload: 3 });\n                dispatch(APIStatus(false));\n                toast.success(resp.message);\n                history.push('/register/authentication');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// REGISTER (STUDENT)\nexport const StudentSignupAction = (model, history, type) => {\n    return (dispatch) => {\n        const URL = \"/o/signUp/Student\";\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        dispatch({ type: actionTypes.CORPORATE, payload: model });\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                localStorage.removeItem('imgpath');\n                localStorage.setItem('regStatus', JSON.stringify(resp));\n                localStorage.setItem('steps', 3);\n                dispatch({ type: actionTypes.STEPS, payload: 3 });\n                dispatch(APIStatus(false));\n                toast.success(resp.message);\n                history.push('/register/studentAuthentication');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// LOGIN\nexport const LoginUserAction = (model, history) => {\n    return (dispatch) => {\n        const URL = \"/o/login\";\n        let formData = new FormData();\n        formData.append('stakeholder', model.stakeholder);\n        formData.append('userID', model.userID);\n        formData.append('password', model.password);\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                localStorage.setItem('token', resp.token);\n                dispatch(APIStatus(false));\n                toast.success(\"Login successful\");\n                if (resp.redirectURL === '/dashboard') {\n                    history.push('/dashboard');\n                } else {\n                    history.push('/register/payment');\n                }\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// VERIFY OTP\nexport const VerifyOtpAction = (model, type, history) => {\n    return (dispatch) => {\n        // const URL = \"/verifyMobile\";\n        const URL = \"/o/verifyOTP\";\n        // if (type === 1) {\n        //     URL = \"/o/verifyMobile\"\n        // } else {\n        //     URL = \"/o/verifyEmail\"\n        // }\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                dispatch(APIStatus(false));\n                if (resp?.MobileVerified && resp?.emailVerified) {\n                    toast.success('OTP verification successful');\n                    history.push('/register/completed');\n                } else {\n                    toast.error('OTP verification failed');\n                }\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// RESEND OTP\nexport const ResendOtpAction = (model) => {\n    return (dispatch) => {\n        const URL = \"/o/resendOtp\";\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                toast.success(resp.message);\n                dispatch(APIStatus(false));\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\nexport const GetCategoryListAction = (type) => {\n    return (dispatch) => {\n        // const URL = \"/u/lut/?lutList=corporateType&lutList=corporateCategory&lutList=corporateIndustry\";\n        let URL;\n        if (type === 'Corporate') {\n            URL = \"/u/lut/?lutList=corporateType&lutList=corporateCategory&lutList=corporateIndustry\"\n        } else if (type === 'University') {\n            URL = \"/u/lut/?lutList=universityCategory\"\n        }\n        Axios.get(URL)\n            .then((res) => {\n                let resp = res.data;\n                dispatch({ type: actionTypes.CATEGOTYLIST, payload: resp });\n            })\n            .catch((err) => {\n                const val = JSON.stringify(err);\n                toast.error(JSON.parse(val).message);\n            })\n    }\n}\n\nexport const SaveCoprorateData = (data, step) => {\n    return (dispatch) => {\n        localStorage.setItem('steps', step);\n        dispatch({ type: actionTypes.CORPORATE, payload: data });\n        dispatch({ type: actionTypes.STEPS, payload: step });\n    }\n}\n\n\n// CREATE PAYMENT\nexport const CreatePaymentAction = (model) => {\n    return (dispatch) => {\n        const URL = \"/pg/createPayment\";\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        // formData.append('payType', val);\n        // formData.append('payType', 'REG_FEE');\n        dispatch(APIStatus(true));\n        const token = localStorage.getItem('token');\n        const header = {\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/json'\n            }\n        }\n        Axios.post(URL, formData, header)\n            .then((res) => {\n                let resp = res.data;\n                sessionStorage.setItem('orderID', resp.orderID);\n                dispatch({ type: actionTypes.PAYMENTORDER, payload: resp });\n                dispatch(APIStatus(false));\n                // toast.success(resp.message);\n                // history.push('/register/completed');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// VALIDATE PAYMENT\nexport const ValidatePaymentAction = (model) => {\n    return (dispatch) => {\n        const URL = \"/pg/verifyPayment\";\n        let formData = new FormData();\n        formData.append('orderID', model);\n        const token = localStorage.getItem('token');\n        const header = {\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/json'\n            }\n        }\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData, header)\n            .then((res) => {\n                let resp = res.data;\n                resp?.messages?.forEach(key => {\n                    toast.success(key);\n                });\n                dispatch(APIStatus(false));\n                dispatch({ type: actionTypes.REFERENCEOBJ, payload: JSON.parse(resp?.referenceObject) });\n                // history.push('/register/completed');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}","import React from 'react';\n\nconst CorporatePrimaryCmp = ({ history, corporatePrimaryData, errors, saveData, handlerChange, handleSubmit, countryCodes, code, code2 }) => {\n    const type = localStorage.getItem('type');\n    const { emailErr, email2Err, mobileErr, mobile2Err } = errors;\n    return (\n        <form onSubmit={handleSubmit} className=\"login-form reg-form\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <div className=\"login-grp\">\n                        <input\n                            type=\"text\"\n                            name=\"corporateName\"\n                            onChange={handlerChange}\n                            value={corporatePrimaryData.corporateName}\n                            className=\"login-inp\"\n                            placeholder={`${type} Name`}\n                            autoFocus/>\n                        <label className=\"inp-caption\">{`${type} Name`}</label>\n                    </div>\n                    <h6 className=\"reg-label\">{type} Headquarters</h6>\n                    <div className=\"login-grp\">\n                        <input\n                            type=\"text\"\n                            name=\"corporateHQAddressLine1\"\n                            onChange={handlerChange}\n                            value={corporatePrimaryData.corporateHQAddressLine1}\n                            className=\"login-inp\"\n                            placeholder=\"Address (Line 1)\"\n                            required={true} />\n                        <label className=\"inp-caption\">Address (Line 1)</label>\n                    </div>\n                    <div className=\"login-grp\">\n                        <input\n                            type=\"text\"\n                            name=\"corporateHQAddressLine2\"\n                            onChange={handlerChange}\n                            value={corporatePrimaryData.corporateHQAddressLine2}\n                            className=\"login-inp\"\n                            placeholder=\"Address (Line 2)\"\n                            required={true} />\n                        <label className=\"inp-caption\">Address (Line 2)</label>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6 pr-1\">\n                            <div className=\"login-grp\">\n                                <select\n                                    name=\"corporateHQAddressCountry\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateHQAddressCountry ? corporatePrimaryData.corporateHQAddressCountry : 'DEFAULT'}\n                                    // value={'DEFAULT'}\n                                    className=\"login-inp\">\n                                    <option value={'DEFAULT'} disabled>Country</option>\n                                    {countryCodes && countryCodes.length >= 0\n                                        ? countryCodes.map((item, i) => <option key={i} value={item.name}>{item.name}</option>) : (null)\n                                    }\n                                </select>\n                                <label className=\"inp-caption\">Country</label>\n                            </div>\n                        </div>\n                        <div className=\"col-md-6 pl-1\">\n                            <div className=\"login-grp\">\n                                <select\n                                    name=\"corporateHQAddressState\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateHQAddressState ? corporatePrimaryData.corporateHQAddressState : 'DEFAULT'}\n                                    className=\"login-inp\"\n                                    required={false}>\n                                    <option value={'DEFAULT'} disabled>State</option>\n                                    <option value=\"TS\">TS</option>\n                                    <option value=\"AP\">AP</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"corporateHQAddressCity\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateHQAddressCity}\n                                    className=\"login-inp\"\n                                    placeholder=\"City\"\n                                    required={true} />\n                                <label className=\"inp-caption\">City</label>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 px-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"corporateHQAddressDistrict\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateHQAddressDistrict}\n                                    className=\"login-inp\"\n                                    placeholder=\"District\"\n                                    required={false} />\n                                <label className=\"inp-caption\">District</label>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"number\"\n                                    name=\"corporateHQAddressZipCode\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateHQAddressZipCode}\n                                    className=\"login-inp\"\n                                    placeholder=\"Zipcode\"\n                                    required={false} />\n                                <label className=\"inp-caption\">Zipcode</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6 pr-1\">\n                            <div className=\"login-grp\">\n                                <div className=\"d-flex\">\n                                    <input\n                                        type=\"tel\"\n                                        name=\"code\"\n                                        onChange={handlerChange}\n                                        value={code}\n                                        className={`login-inp px-1 text-center`}\n                                        placeholder=\"\"\n                                        style={{ width: '50px' }}\n                                        readOnly\n                                        disabled\n                                        required={true} />\n                                    <div className=\"position-relative\">\n                                        <input\n                                            type=\"tel\"\n                                            name=\"corporateHQAddressPhone\"\n                                            onChange={handlerChange}\n                                            value={corporatePrimaryData.corporateHQAddressPhone}\n                                            className={`login-inp${mobileErr ? ' login-inp-error' : ''}`}\n                                            placeholder=\"Phone Number\"\n                                            required={true} />\n                                        <label className=\"inp-caption\">Phone Number</label>\n                                    </div>\n                                </div>\n                                {mobileErr ? <p className=\"inp-errors\">{mobileErr}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-6 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"email\"\n                                    name=\"corporateHQAddressEmail\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateHQAddressEmail}\n                                    className={`login-inp${emailErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Office mail\"\n                                    required={false} />\n                                <label className=\"inp-caption\">Office mail</label>\n                                {emailErr ? <p className=\"inp-errors\">{emailErr}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"login-grp\">\n                        <input\n                            type=\"text\"\n                            name=\"CIN\"\n                            onChange={handlerChange}\n                            value={corporatePrimaryData.CIN}\n                            className=\"login-inp\"\n                            placeholder={type === 'Corporate' ? 'CIN' : 'University/College ID'}\n                            required={true} />\n                        <label className=\"inp-caption\">{type === 'Corporate' ? 'CIN' : 'University/College ID'}</label>\n                    </div>\n                    <div className=\"d-lg-flex\">\n                        <h6 className=\"reg-label\">{type} Local Branch</h6>\n                        <div className=\"custom-control custom-checkbox\">\n                            <input\n                                type=\"checkbox\"\n                                onChange={saveData}\n                                className=\"custom-control-input\"\n                                id=\"save\" />\n                            <label className=\"custom-control-label\" htmlFor=\"save\">Same as {type} Head Quarters</label>\n                        </div>\n                    </div>\n                    <div className=\"login-grp\">\n                        <input\n                            type=\"text\"\n                            name=\"corporateLocalBranchAddressLine1\"\n                            onChange={handlerChange}\n                            value={corporatePrimaryData.corporateLocalBranchAddressLine1}\n                            className=\"login-inp\"\n                            placeholder=\"Address (Line 1)\"\n                            required={false} />\n                        <label className=\"inp-caption\">Address (Line 1)</label>\n                    </div>\n                    <div className=\"login-grp\">\n                        <input\n                            type=\"text\"\n                            name=\"corporateLocalBranchAddressLine2\"\n                            onChange={handlerChange}\n                            value={corporatePrimaryData.corporateLocalBranchAddressLine2}\n                            className=\"login-inp\"\n                            placeholder=\"Address (Line 2)\"\n                            required={false} />\n                        <label className=\"inp-caption\">Address (Line 2)</label>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6 pr-1\">\n                            <div className=\"login-grp\">\n                                <select\n                                    name=\"corporateLocalBranchAddressCountry\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateLocalBranchAddressCountry ? corporatePrimaryData.corporateLocalBranchAddressCountry : 'DEFAULT'}\n                                    className=\"login-inp\"\n                                    required={false}>\n                                    <option value={'DEFAULT'} disabled>Country</option>\n                                    {countryCodes && countryCodes.length >= 0\n                                        ? countryCodes.map((item, i) => <option key={i} value={item.name}>{item.name}</option>) : (null)\n                                    }\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"col-md-6 pl-1\">\n                            <div className=\"login-grp\">\n                                <select\n                                    name=\"corporateLocalBranchAddressState\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateLocalBranchAddressState ? corporatePrimaryData.corporateLocalBranchAddressState : 'DEFAULT'}\n                                    className=\"login-inp\"\n                                    required={false}>\n                                    <option value={'DEFAULT'} disabled>State</option>\n                                    <option value=\"TS\">TS</option>\n                                    <option value=\"AP\">AP</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"corporateLocalBranchAddressCity\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateLocalBranchAddressCity}\n                                    className=\"login-inp\"\n                                    placeholder=\"City\"\n                                    required={false} />\n                                <label className=\"inp-caption\">City</label>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 px-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"corporateLocalBranchAddressDistrict\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateLocalBranchAddressDistrict}\n                                    className=\"login-inp\"\n                                    placeholder=\"District\"\n                                    required={false} />\n                                <label className=\"inp-caption\">District</label>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"number\"\n                                    name=\"corporateLocalBranchAddressZipCode\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateLocalBranchAddressZipCode}\n                                    className=\"login-inp\"\n                                    placeholder=\"Zipcode\"\n                                    required={false} />\n                                <label className=\"inp-caption\">Zipcode</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6 pr-1\">\n                            <div className=\"login-grp\">\n                                <div className=\"d-flex\">\n                                    <input\n                                        type=\"tel\"\n                                        name=\"code2\"\n                                        onChange={handlerChange}\n                                        value={code2}\n                                        className={`login-inp px-1 text-center`}\n                                        placeholder=\"\"\n                                        style={{ width: '50px' }}\n                                        readOnly\n                                        disabled\n                                        required={true} />\n                                    <div className=\"position-relative\">\n                                        <input\n                                            type=\"tel\"\n                                            name=\"corporateLocalBranchAddressPhone\"\n                                            onChange={handlerChange}\n                                            value={corporatePrimaryData.corporateLocalBranchAddressPhone}\n                                            className={`login-inp${mobile2Err ? ' login-inp-error' : ''}`}\n                                            placeholder=\"Phone Number\"\n                                            required={false} />\n                                        <label className=\"inp-caption\">Phone Number</label>\n                                    </div>\n                                </div>\n                                {mobile2Err ? <p className=\"inp-errors\">{mobile2Err}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-6 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"email\"\n                                    name=\"corporateLocalBranchAddressEmail\"\n                                    onChange={handlerChange}\n                                    value={corporatePrimaryData.corporateLocalBranchAddressEmail}\n                                    className={`login-inp${email2Err ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Office mail\"\n                                    required={false} />\n                                <label className=\"inp-caption\">Office mail</label>\n                                {email2Err ? <p className=\"inp-errors\">{email2Err}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"text-right\">\n                <button type=\"submit\" className=\"reg-btn\">Next</button>\n            </div>\n        </form>\n    )\n}\n\nexport default CorporatePrimaryCmp;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport CorporatePrimaryCmp from '../../../../Components/Forms/CorporateCmp/RegisterCmp/CorporatePrimaryCmp';\nimport { GetCountryCodeAction, SaveCoprorateData } from '../../../../Store/Actions/CorporateActions/CorporateAction';\n\nconst Register = (props) => {\n    const initialState = {\n        corporateName: '',\n        corporateHQAddressLine1: '',\n        corporateHQAddressLine2: '',\n        corporateHQAddressCountry: '',\n        corporateHQAddressState: '',\n        corporateHQAddressCity: '',\n        corporateHQAddressDistrict: '',\n        corporateHQAddressZipCode: '',\n        corporateHQAddressPhone: '',\n        corporateHQAddressEmail: '',\n        CIN: '',\n        corporateLocalBranchAddressLine1: '',\n        corporateLocalBranchAddressLine2: '',\n        corporateLocalBranchAddressCountry: '',\n        corporateLocalBranchAddressState: '',\n        corporateLocalBranchAddressCity: '',\n        corporateLocalBranchAddressDistrict: '',\n        corporateLocalBranchAddressZipCode: '',\n        corporateLocalBranchAddressPhone: '',\n        corporateLocalBranchAddressEmail: ''\n    };\n\n    const [corporatePrimaryData, setCorporatePrimaryData] = useState(initialState);\n    const [errors, setErrors] = useState({ emailErr: '', email2Err: '', mobileErr: '', mobile2Err: '' });\n    const [code, setCode] = useState('');\n    const [code2, setCode2] = useState('');\n\n    const dispatch = useDispatch();\n    const storeData = useSelector(state => state.CorporateReducer.corporatePrimaryState);\n    const countryCodes = useSelector(state => state.CorporateReducer.countryCodes);\n    console.log(storeData);\n\n    useEffect(() => {\n        dispatch(GetCountryCodeAction());\n        if (storeData) {\n            for (const key in storeData) {\n                setCorporatePrimaryData(prevState => ({\n                    // ...prevState,\n                    [key]: storeData[key]\n                }))\n            }\n        }\n    }, []);\n\n    const handlerChange = (event) => {\n        const { name, value } = event.target;\n        setCorporatePrimaryData(preState => ({\n            ...preState,\n            [name]: value\n        }));\n\n        switch (name) {\n            case 'corporateHQAddressEmail':\n                const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n                if (value && mailformat.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        emailErr: ''\n                    }));\n                } else if (!value || !mailformat.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        emailErr: 'Email error'\n                    }));\n                }\n                return;\n\n            case 'corporateLocalBranchAddressEmail':\n                const mailformat1 = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n                if (value && mailformat1.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        email2Err: ''\n                    }));\n                } else if (!value || !mailformat1.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        email2Err: 'Email error'\n                    }));\n                }\n                return;\n\n            case 'corporateHQAddressPhone':\n                // setCorporatePrimaryData({\n                //     corporateHQAddressPhone: code + value\n                // });\n                const num = /^[+-]?[0-9\\b]+$/;\n                if (num.test(value)) {\n                    // if (val.match(phoneno)) {\n                    if (value.length === 10) {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobileErr: ''\n                        }));\n                    } else {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobileErr: 'Invalid'\n                        }));\n                    }\n                } else {\n                    setErrors(preState => ({\n                        ...preState,\n                        mobileErr: 'Invalid'\n                    }));\n                }\n                return;\n            case 'corporateLocalBranchAddressPhone':\n                // setCorporatePrimaryData({\n                //     corporateLocalBranchAddressPhone: code + value\n                // });\n                const num2 = /^[+-]?[0-9\\b]+$/;\n                if (num2.test(value)) {\n                    // if (val.match(phoneno)) {\n                    if (value.length === 10) {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobile2Err: ''\n                        }));\n                    } else {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobile2Err: 'Invalid'\n                        }));\n                    }\n                } else {\n                    setErrors(preState => ({\n                        ...preState,\n                        mobile2Err: 'Invalid'\n                    }));\n                }\n                return;\n\n            case 'corporateHQAddressCountry':\n                const countryCode1 = countryCodes.find(item => item.name === value);\n                setCode('+' + countryCode1?.callingCodes[0]);\n                return;\n\n            case 'corporateLocalBranchAddressCountry':\n                const countryCode2 = countryCodes.find(item => item.name === value);\n                setCode2('+' + countryCode2.callingCodes[0]);\n                return;\n\n            default:\n                break;\n        }\n    }\n\n    const saveData = (event) => {\n        const isCheked = event.target.checked;\n        if (isCheked) {\n            setCorporatePrimaryData(preState => ({\n                ...preState,\n                corporateLocalBranchAddressLine1: corporatePrimaryData.corporateHQAddressLine1,\n                corporateLocalBranchAddressLine2: corporatePrimaryData.corporateHQAddressLine2,\n                corporateLocalBranchAddressCountry: corporatePrimaryData.corporateHQAddressCountry,\n                corporateLocalBranchAddressState: corporatePrimaryData.corporateHQAddressState,\n                corporateLocalBranchAddressCity: corporatePrimaryData.corporateHQAddressCity,\n                corporateLocalBranchAddressDistrict: corporatePrimaryData.corporateHQAddressDistrict,\n                corporateLocalBranchAddressZipCode: corporatePrimaryData.corporateHQAddressZipCode,\n                corporateLocalBranchAddressPhone: corporatePrimaryData.corporateHQAddressPhone,\n                corporateLocalBranchAddressEmail: corporatePrimaryData.corporateHQAddressEmail\n            }));\n            setCode2(code);\n        } else {\n            setCorporatePrimaryData(preState => ({\n                ...preState,\n                corporateLocalBranchAddressLine1: '',\n                corporateLocalBranchAddressLine2: '',\n                corporateLocalBranchAddressCountry: '',\n                corporateLocalBranchAddressState: '',\n                corporateLocalBranchAddressCity: '',\n                corporateLocalBranchAddressDistrict: '',\n                corporateLocalBranchAddressZipCode: '',\n                corporateLocalBranchAddressPhone: '',\n                corporateLocalBranchAddressEmail: ''\n            }));\n            setCode2('')\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const { emailErr, mobileErr } = errors;\n        const { corporateName, CIN, corporateHQAddressPhone, corporateLocalBranchAddressPhone, corporateHQAddressZipCode } = corporatePrimaryData;\n        if (corporateName && CIN && corporateHQAddressPhone && corporateHQAddressZipCode && !emailErr && !mobileErr) {\n            corporatePrimaryData.corporateHQAddressPhone = code + corporateHQAddressPhone;\n            corporatePrimaryData.corporateLocalBranchAddressPhone = code2 + corporateLocalBranchAddressPhone;\n            dispatch(SaveCoprorateData(corporatePrimaryData, 1));\n            props.history.push('/register/CorporateSecondary');\n        } else {\n            toast.error(\"Please enter all input fields\")\n        }\n    }\n\n    return (\n        <CorporatePrimaryCmp\n            corporatePrimaryData={corporatePrimaryData}\n            errors={errors}\n            code={code}\n            code2={code2}\n            countryCodes={countryCodes}\n            history={props.history}\n            saveData={saveData}\n            handlerChange={handlerChange}\n            handleSubmit={handleSubmit}\n        />\n\n    )\n}\n\nexport default Register;\n"],"sourceRoot":""}