{"version":3,"sources":["Store/Actions/CorporateActions/CorporateAction.js","Components/Forms/CorporateCmp/RegisterCmp/ContactPersonnelCmp.js","Pages/Forms/Corporate/Register/ContactPersonnel.js"],"names":["ResetRdrAction","dispatch","type","actionTypes","payload","undefined","APIStatus","val","GetCountryCodeAction","Axios","get","then","res","resp","data","catch","err","JSON","stringify","toast","error","parse","message","SignupAction","model","history","URL","formData","FormData","key","append","post","localStorage","removeItem","setItem","success","push","response","errors","StudentSignupAction","VerifyOtpAction","MobileVerified","emailVerified","ResendOtpAction","GetCategoryListAction","SaveCoprorateData","step","CreatePaymentAction","token","getItem","header","headers","sessionStorage","orderID","ValidatePaymentAction","messages","forEach","referenceObject","ContactPersonnelCmp","contactPersonnel","handlerChange","handleSubmit","emailErr","email2Err","passwordErr","lnameErr","fnameErr","designationErr","repeatPasswordErr","mobileErr","mobile2Err","onSubmit","className","name","onChange","defaultValue","primaryContactFirstName","placeholder","autoFocus","required","primaryContactMiddleName","primaryContactLastName","primaryContactDesignation","primaryContactPhone","primaryContactEmail","secondaryContactFirstName","secondaryContactMiddleName","secondaryContactLastName","secondaryContactDesignation","secondaryContactPhone","secondaryContactEmail","password","onClick","ContactPersonnel","props","initialState","useState","setContactPersonnel","repeatPassword","setRepeatPassword","setErrors","storeData","useSelector","state","CorporateReducer","corporatePrimaryState","apiStatus","useDispatch","useEffect","Object","keys","map","keyName","prevState","event","a","preventDefault","selectedName","finalData","assign","universityName","corporateName","universityHQAddressLine1","corporateHQAddressLine1","universityHQAddressLine2","corporateHQAddressLine2","universityHQAddressLine3","universityHQAddressCountry","corporateHQAddressCountry","universityHQAddressState","corporateHQAddressState","universityHQAddressCity","corporateHQAddressCity","universityHQAddressDistrict","corporateHQAddressDistrict","universityHQAddressZipcode","corporateHQAddressZipCode","universityHQAddressPhone","corporateHQAddressPhone","universityHQAddressemail","corporateHQAddressEmail","universityLocalBranchAddressLine1","corporateLocalBranchAddressLine1","universityLocalBranchAddressLine2","corporateLocalBranchAddressLine2","universityLocalBranchAddressLine3","universityLocalBranchAddressCountry","corporateLocalBranchAddressCountry","universityLocalBranchAddressState","corporateLocalBranchAddressState","universityLocalBranchAddressCity","corporateLocalBranchAddressCity","universityLocalBranchAddressDistrict","corporateLocalBranchAddressDistrict","universityLocalBranchAddressZipcode","corporateLocalBranchAddressZipCode","universityLocalBranchAddressPhone","corporateLocalBranchAddressPhone","universityLocalBranchAddressemail","corporateLocalBranchAddressEmail","universitySector","corporateIndustry","yearOfEstablishment","universityProfile","companyProfile","attachment","target","value","preState","mailformat","test","mailformat1","length"],"mappings":"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","file":"static/js/21.6224878f.chunk.js","sourcesContent":["\nimport Axios from '../../../utils/axios';\nimport { toast } from 'react-toastify';\nimport * as actionTypes from './actionTypes';\n\n\n\n// RESET ALL REDUCERES\nexport const ResetRdrAction = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.RESET,\n            payload: undefined\n        })\n    }\n}\n\nexport const APISuccess = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.SUCCESS,\n            payload: true\n        })\n    }\n}\nexport const APIStatus = (val) => {\n    return (dispatch) => {\n        dispatch({ type: actionTypes.APISTATUS, payload: val });\n    }\n}\n\nexport const APIError = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.ERROR,\n            payload: true\n        })\n    }\n}\n\n\nexport const GetCountryCodeAction = () => {\n    return (dispatch) => {\n        const URL = \"http://restcountries.eu/rest/v2/all?fields=name;flag;callingCodes;\";\n        Axios.get(URL)\n            .then((res) => {\n                let resp = res.data;\n                dispatch({ type: actionTypes.COUNTRYCODES, payload: resp });\n            })\n            .catch((err) => {\n                const val = JSON.stringify(err);\n                toast.error(JSON.parse(val).message);\n            })\n    }\n}\n\n// REGISTER (CORPORATE & UNIVERSITY)\nexport const SignupAction = (model, history, type) => {\n    return (dispatch) => {\n        // const URL = \"/o/signUp/Corporate\";\n        let URL;\n        if (type === 'Corporate') {\n            URL = \"/o/signUp/Corporate\";\n        } else if (type === 'University') {\n            URL = \"/o/signUp/University\";\n        }\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        dispatch({ type: actionTypes.CORPORATE, payload: model });\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                localStorage.removeItem('imgpath');\n                localStorage.setItem('regStatus', JSON.stringify(resp));\n                localStorage.setItem('steps', 3);\n                dispatch({ type: actionTypes.STEPS, payload: 3 });\n                dispatch(APIStatus(false));\n                toast.success(resp.message);\n                history.push('/register/authentication');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// REGISTER (STUDENT)\nexport const StudentSignupAction = (model, history, type) => {\n    return (dispatch) => {\n        const URL = \"/o/signUp/Student\";\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        dispatch({ type: actionTypes.CORPORATE, payload: model });\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                localStorage.removeItem('imgpath');\n                localStorage.setItem('regStatus', JSON.stringify(resp));\n                localStorage.setItem('steps', 3);\n                dispatch({ type: actionTypes.STEPS, payload: 3 });\n                dispatch(APIStatus(false));\n                toast.success(resp.message);\n                history.push('/register/studentAuthentication');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// LOGIN\nexport const LoginUserAction = (model, history) => {\n    return (dispatch) => {\n        const URL = \"/o/login\";\n        let formData = new FormData();\n        formData.append('stakeholder', model.stakeholder);\n        formData.append('userID', model.userID);\n        formData.append('password', model.password);\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                localStorage.setItem('token', resp.token);\n                dispatch(APIStatus(false));\n                toast.success(\"Login successful\");\n                if (resp.redirectURL === '/dashboard') {\n                    history.push('/dashboard');\n                } else {\n                    history.push('/register/payment');\n                }\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// VERIFY OTP\nexport const VerifyOtpAction = (model, type, history) => {\n    return (dispatch) => {\n        // const URL = \"/verifyMobile\";\n        const URL = \"/o/verifyOTP\";\n        // if (type === 1) {\n        //     URL = \"/o/verifyMobile\"\n        // } else {\n        //     URL = \"/o/verifyEmail\"\n        // }\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                dispatch(APIStatus(false));\n                if (resp?.MobileVerified && resp?.emailVerified) {\n                    toast.success('OTP verification successful');\n                    history.push('/register/completed');\n                } else {\n                    toast.error('OTP verification failed');\n                }\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// RESEND OTP\nexport const ResendOtpAction = (model) => {\n    return (dispatch) => {\n        const URL = \"/o/resendOtp\";\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData)\n            .then((res) => {\n                let resp = res.data;\n                toast.success(resp.message);\n                dispatch(APIStatus(false));\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\nexport const GetCategoryListAction = (type) => {\n    return (dispatch) => {\n        // const URL = \"/u/lut/?lutList=corporateType&lutList=corporateCategory&lutList=corporateIndustry\";\n        let URL;\n        if (type === 'Corporate') {\n            URL = \"/u/lut/?lutList=corporateType&lutList=corporateCategory&lutList=corporateIndustry\"\n        } else if (type === 'University') {\n            URL = \"/u/lut/?lutList=universityCategory\"\n        }\n        Axios.get(URL)\n            .then((res) => {\n                let resp = res.data;\n                dispatch({ type: actionTypes.CATEGOTYLIST, payload: resp });\n            })\n            .catch((err) => {\n                const val = JSON.stringify(err);\n                toast.error(JSON.parse(val).message);\n            })\n    }\n}\n\nexport const SaveCoprorateData = (data, step) => {\n    return (dispatch) => {\n        localStorage.setItem('steps', step);\n        dispatch({ type: actionTypes.CORPORATE, payload: data });\n        dispatch({ type: actionTypes.STEPS, payload: step });\n    }\n}\n\n\n// CREATE PAYMENT\nexport const CreatePaymentAction = (model) => {\n    return (dispatch) => {\n        const URL = \"/pg/createPayment\";\n        let formData = new FormData();\n        for (const key in model) {\n            formData.append(key, model[key]);\n        }\n        // formData.append('payType', val);\n        // formData.append('payType', 'REG_FEE');\n        dispatch(APIStatus(true));\n        const token = localStorage.getItem('token');\n        const header = {\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/json'\n            }\n        }\n        Axios.post(URL, formData, header)\n            .then((res) => {\n                let resp = res.data;\n                sessionStorage.setItem('orderID', resp.orderID);\n                dispatch({ type: actionTypes.PAYMENTORDER, payload: resp });\n                dispatch(APIStatus(false));\n                // toast.success(resp.message);\n                // history.push('/register/completed');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}\n\n// VALIDATE PAYMENT\nexport const ValidatePaymentAction = (model) => {\n    return (dispatch) => {\n        const URL = \"/pg/verifyPayment\";\n        let formData = new FormData();\n        formData.append('orderID', model);\n        const token = localStorage.getItem('token');\n        const header = {\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/json'\n            }\n        }\n        dispatch(APIStatus(true));\n        Axios.post(URL, formData, header)\n            .then((res) => {\n                let resp = res.data;\n                resp?.messages?.forEach(key => {\n                    toast.success(key);\n                });\n                dispatch(APIStatus(false));\n                dispatch({ type: actionTypes.REFERENCEOBJ, payload: JSON.parse(resp?.referenceObject) });\n                // history.push('/register/completed');\n            })\n            .catch((err) => {\n                if (err.response) {\n                    toast.error(err.response.data.errors[0].message);\n                } else {\n                    toast.error(\"Something Wrong!\", err.message);\n                }\n                dispatch(APIStatus(false));\n            })\n    }\n}","import React from 'react';\n\nconst ContactPersonnelCmp = ({history, errors, contactPersonnel, handlerChange, handleSubmit }) => {\n    const { emailErr, email2Err, passwordErr, lnameErr, fnameErr, designationErr, repeatPasswordErr, mobileErr, mobile2Err } = errors;\n    return (\n        <form onSubmit={handleSubmit} className=\"login-form reg-form\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-10\">\n                    <div className=\"reg-header\"><i className=\"far fa-user\" />Primary Contact</div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"primaryContactFirstName\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.primaryContactFirstName}\n                                    className={`login-inp${fnameErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"First Name\"\n                                    autoFocus\n                                    required={true} />\n                                    {fnameErr ? <p className=\"inp-errors\">{fnameErr}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 px-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"primaryContactMiddleName\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.primaryContactMiddleName}\n                                    className={`login-inp`}\n                                    placeholder=\"Middle Name\"\n                                    required={false} />\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"primaryContactLastName\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.primaryContactLastName}\n                                    className={`login-inp${lnameErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Last Name\"\n                                    required={true} />\n                                    {lnameErr ? <p className=\"inp-errors\">{lnameErr}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"primaryContactDesignation\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.primaryContactDesignation}\n                                    className={`login-inp${designationErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Designation\"\n                                    required={true} />\n                                    {designationErr ? <p className=\"inp-errors\">{designationErr}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 px-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"tel\"\n                                    name=\"primaryContactPhone\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.primaryContactPhone}\n                                    className={`login-inp${mobileErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Phone Number\"\n                                    required={true} />\n                                    {mobileErr ? <p className=\"inp-errors\">{mobileErr}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"email\"\n                                    name=\"primaryContactEmail\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.primaryContactEmail}\n                                    className={`login-inp${emailErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Email\"\n                                    required={true} />\n                                    {emailErr ? <p className=\"inp-errors\">{emailErr}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"reg-header\"><i className=\"far fa-user\" />Secondary Contact</div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"secondaryContactFirstName\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.secondaryContactFirstName}\n                                    className={`login-inp`}\n                                    placeholder=\"First Name\"\n                                    required={false} />\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 px-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"secondaryContactMiddleName\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.secondaryContactMiddleName}\n                                    className={`login-inp`}\n                                    placeholder=\"Middle Name\"\n                                    required={false} />\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"secondaryContactLastName\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.secondaryContactLastName}\n                                    className={`login-inp`}\n                                    placeholder=\"Last Name\"\n                                    required={false} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"text\"\n                                    name=\"secondaryContactDesignation\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.secondaryContactDesignation}\n                                    className={`login-inp`}\n                                    placeholder=\"Designation\"\n                                    required={false} />\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 px-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"tel\"\n                                    name=\"secondaryContactPhone\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.secondaryContactPhone}\n                                    className={`login-inp${mobile2Err ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Phone Number\"\n                                    required={false} />\n                                    {mobile2Err ? <p className=\"inp-errors\">{mobile2Err}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"email\"\n                                    name=\"secondaryContactEmail\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.secondaryContactEmail}\n                                    className={`login-inp${email2Err ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Email\"\n                                    required={false} />\n                                    {email2Err ? <p className=\"inp-errors\">{email2Err}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"reg-header\"><i className=\"fas fa-unlock-alt\" />Password</div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6 pr-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    onChange={handlerChange}\n                                    defaultValue={contactPersonnel.password}\n                                    className={`login-inp${passwordErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Choose your login password (Min 8 digits)\"\n                                    required={true} />\n                                    {passwordErr ? <p className=\"inp-errors\">{passwordErr}</p> : null}\n                            </div>\n                        </div>\n                        <div className=\"col-md-6 pl-1\">\n                            <div className=\"login-grp\">\n                                <input\n                                    type=\"password\"\n                                    name=\"repeatPassword\"\n                                    onChange={handlerChange}\n                                    className={`login-inp${repeatPasswordErr ? ' login-inp-error' : ''}`}\n                                    placeholder=\"Repeat the password\"\n                                    required={true} />\n                                    {repeatPasswordErr ? <p className=\"inp-errors\">{repeatPasswordErr}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"d-flex justify-content-between mt-4\">\n                        <button type=\"button\" className=\"reg-btn\" onClick={() => { history.push('/register/CorporateSecondary') }}>Previous</button>\n                        <button type=\"submit\" className=\"reg-btn\">Next</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default ContactPersonnelCmp\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ContactPersonnelCmp from '../../../../Components/Forms/CorporateCmp/RegisterCmp/ContactPersonnelCmp';\nimport { ResetRdrAction, SaveCoprorateData, SignupAction } from '../../../../Store/Actions/CorporateActions/CorporateAction';\n\nconst ContactPersonnel = (props) => {\n    const initialState = {\n        primaryContactFirstName: '',\n        primaryContactMiddleName: '',\n        primaryContactLastName: '',\n        primaryContactDesignation: '',\n        primaryContactPhone: '',\n        primaryContactEmail: '',\n        secondaryContactFirstName: '',\n        secondaryContactMiddleName: '',\n        secondaryContactLastName: '',\n        secondaryContactDesignation: '',\n        secondaryContactPhone: '',\n        secondaryContactEmail: '',\n        password: ''\n    };\n\n    const [contactPersonnel, setContactPersonnel] = useState(initialState);\n    const [repeatPassword, setRepeatPassword] = useState('');\n    const [errors, setErrors] = useState({ emailErr: '', email2Err: '', passwordErr: '', lnameErr: '', fnameErr: '', designationErr: '', repeatPasswordErr: '', mobileErr: '', mobile2Err: '' });\n\n    const storeData = useSelector(state => state.CorporateReducer.corporatePrimaryState);\n    const apiStatus = useSelector(state => state.CorporateReducer.apiStatus);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (storeData) {\n            Object.keys(initialState).map(keyName => {\n                for (const key in storeData) {\n                    if (keyName === key) {\n                        setContactPersonnel(prevState => ({\n                            ...prevState,\n                            [key]: storeData[key]\n                        }))\n                    }\n                }\n            })\n        }\n    }, []);\n\n    // useEffect(() => {\n    //     if (apiStatus) {\n    //         props.history.push('/register/authentication');\n    //     }\n    //     return () => {\n    //         dispatch(ResetRdrAction());\n    //     }\n    // }, [apiStatus])\n\n    const handlerChange = (event) => {\n        const { name, value } = event.target;\n        if (name === \"repeatPassword\") {\n            setRepeatPassword(value);\n        } else {\n            setContactPersonnel(preState => ({\n                ...preState,\n                [name]: value\n            }));\n        }\n\n        switch (name) {\n            case 'primaryContactEmail':\n                const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n                if (value && mailformat.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        emailErr: ''\n                    }));\n                } else if (!value || !mailformat.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        emailErr: 'Email error'\n                    }));\n                }\n                return;\n            case 'secondaryContactEmail':\n                const mailformat1 = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n                if (value && mailformat1.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        email2Err: ''\n                    }));\n                } else if (!value || !mailformat1.test(value)) {\n                    setErrors(preState => ({\n                        ...preState,\n                        email2Err: 'Email error'\n                    }));\n                }\n                return;\n            case 'primaryContactLastName':\n                if (value) {\n                    setErrors(preState => ({\n                        ...preState,\n                        lnameErr: ''\n                    }));\n                } else if (!value) {\n                    setErrors(preState => ({\n                        ...preState,\n                        lnameErr: 'Last name error'\n                    }));\n                }\n                return;\n            case 'primaryContactFirstName':\n                if (value) {\n                    setErrors(preState => ({\n                        ...preState,\n                        fnameErr: ''\n                    }));\n                } else if (!value) {\n                    setErrors(preState => ({\n                        ...preState,\n                        fnameErr: 'First name error'\n                    }));\n                }\n                return;\n            case 'primaryContactDesignation':\n                if (value) {\n                    setErrors(preState => ({\n                        ...preState,\n                        designationErr: ''\n                    }));\n                } else if (!value) {\n                    setErrors(preState => ({\n                        ...preState,\n                        designationErr: 'primaryContactDesignation error'\n                    }));\n                }\n                return;\n            case 'primaryContactPhone':\n                const num = /^[+-]?[0-9\\b]+$/;\n                if (num.test(value)) {\n                    // if (val.match(phoneno)) {\n                    if (value.length >= 13) {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobileErr: ''\n                        }));\n                    } else {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobileErr: 'Invalid'\n                        }));\n                    }\n                } else {\n                    setErrors(preState => ({\n                        ...preState,\n                        mobileErr: 'Invalid'\n                    }));\n                }\n                return;\n            case 'secondaryContactPhone':\n                const num1 = /^[+-]?[0-9\\b]+$/;\n                if (num1.test(value)) {\n                    // if (val.match(phoneno)) {\n                    if (value.length >= 13) {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobile2Err: ''\n                        }));\n                    } else {\n                        setErrors(preState => ({\n                            ...preState,\n                            mobile2Err: 'Invalid'\n                        }));\n                    }\n                } else {\n                    setErrors(preState => ({\n                        ...preState,\n                        mobile2Err: 'Invalid'\n                    }));\n                }\n                return;\n            case 'password':\n                if (value && value.length >= 8) {\n                    setErrors(preState => ({\n                        ...preState,\n                        passwordErr: ''\n                    }));\n                } else {\n                    setErrors(preState => ({\n                        ...preState,\n                        passwordErr: 'Password error'\n                    }));\n                }\n                return;\n            case 'repeatPassword':\n                if (value === contactPersonnel.password) {\n                    setErrors(preState => ({\n                        ...preState,\n                        repeatPasswordErr: ''\n                    }));\n                } else {\n                    setErrors(preState => ({\n                        ...preState,\n                        repeatPasswordErr: 'Password does not match'\n                    }));\n                }\n                return;\n\n            default:\n                break;\n        }\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const selectedName = localStorage.getItem('type');\n        const { emailErr, email2Err, passwordErr, lnameErr, fnameErr, designationErr, repeatPasswordErr, mobileErr, mobile2Err } = errors;\n        const { primaryContactFirstName, primaryContactLastName, primaryContactDesignation, primaryContactPhone, primaryContactEmail, password } = contactPersonnel;\n        const finalData = Object.assign(storeData, contactPersonnel);\n        if (primaryContactFirstName && primaryContactLastName && primaryContactDesignation && primaryContactPhone && primaryContactEmail &&\n            !emailErr && !passwordErr && !lnameErr && !fnameErr && !designationErr && !mobileErr && (password === repeatPassword)) {\n            // await dispatch(SaveCoprorateData(contactPersonnel, 3));\n            // await dispatch(SignupAction(finalData, props.history));\n            // props.history.push('/register/authentication');\n            if (selectedName === 'Corporate') {\n                await dispatch(SaveCoprorateData(contactPersonnel, 3));\n                await dispatch(SignupAction(finalData, props.history, selectedName));\n\n            } else if (selectedName === 'University') {\n                const data = {\n                    universityName: finalData.corporateName,\n                    universityHQAddressLine1: finalData.corporateHQAddressLine1,\n                    universityHQAddressLine2: finalData.corporateHQAddressLine2,\n                    universityHQAddressLine3: '',\n                    universityHQAddressCountry: finalData.corporateHQAddressCountry,\n                    universityHQAddressState: finalData.corporateHQAddressState,\n                    universityHQAddressCity: finalData.corporateHQAddressCity,\n                    universityHQAddressDistrict: finalData.corporateHQAddressDistrict,\n                    universityHQAddressZipcode: finalData.corporateHQAddressZipCode,\n                    universityHQAddressPhone: finalData.corporateHQAddressPhone,\n                    universityHQAddressemail: finalData.corporateHQAddressEmail,\n                    universityLocalBranchAddressLine1: finalData.corporateLocalBranchAddressLine1,\n                    universityLocalBranchAddressLine2: finalData.corporateLocalBranchAddressLine2,\n                    universityLocalBranchAddressLine3: '',\n                    universityLocalBranchAddressCountry: finalData.corporateLocalBranchAddressCountry,\n                    universityLocalBranchAddressState: finalData.corporateLocalBranchAddressState,\n                    universityLocalBranchAddressCity: finalData.corporateLocalBranchAddressCity,\n                    universityLocalBranchAddressDistrict: finalData.corporateLocalBranchAddressDistrict,\n                    universityLocalBranchAddressZipcode: finalData.corporateLocalBranchAddressZipCode,\n                    universityLocalBranchAddressPhone: finalData.corporateLocalBranchAddressPhone,\n                    universityLocalBranchAddressemail: finalData.corporateLocalBranchAddressEmail,\n                    primaryContactFirstName: finalData.primaryContactFirstName,\n                    primaryContactMiddleName: finalData.primaryContactMiddleName,\n                    primaryContactLastName: finalData.primaryContactLastName,\n                    primaryContactDesignation: finalData.primaryContactDesignation,\n                    primaryContactPhone: finalData.primaryContactPhone,\n                    primaryContactEmail: finalData.primaryContactEmail,\n                    secondaryContactFirstName: finalData.secondaryContactFirstName,\n                    secondaryContactMiddleName: finalData.secondaryContactMiddleName,\n                    secondaryContactLastName: finalData.secondaryContactLastName,\n                    secondaryContactDesignation: finalData.secondaryContactDesignation,\n                    secondaryContactPhone: finalData.secondaryContactPhone,\n                    secondaryContactEmail: finalData.secondaryContactEmail,\n                    universitySector: finalData.corporateIndustry,\n                    yearOfEstablishment: finalData.yearOfEstablishment,\n                    universityProfile: finalData.companyProfile,\n                    attachment: finalData.attachment,\n                    password: finalData.password\n                }\n                await dispatch(SaveCoprorateData(data, 3));\n                await dispatch(SignupAction(data, props.history, selectedName));\n            }\n        } else {\n            toast.error(\"Please enter required input fields\")\n        }\n\n    }\n\n    return (\n        <ContactPersonnelCmp\n            history={props.history}\n            errors={errors}\n            contactPersonnel={contactPersonnel}\n            handlerChange={handlerChange}\n            handleSubmit={handleSubmit}\n        />\n    )\n}\n\nexport default ContactPersonnel;\n"],"sourceRoot":""}